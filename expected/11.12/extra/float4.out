--
-- FLOAT4
--
--Testcase 46:
CREATE EXTENSION sqlite_fdw;
--Testcase 47:
CREATE SERVER sqlite_svr FOREIGN DATA WRAPPER sqlite_fdw
OPTIONS (database '/tmp/sqlitefdw_test_core.db');
--Testcase 48:
CREATE FOREIGN TABLE FLOAT4_TBL(f1 float4 OPTIONS (key 'true')) SERVER sqlite_svr;
--Testcase 49:
CREATE FOREIGN TABLE FLOAT4_TMP(f1 float4, id int OPTIONS (key 'true')) SERVER sqlite_svr;
--Testcase 1:
INSERT INTO FLOAT4_TBL(f1) VALUES ('    0.0');
--Testcase 2:
INSERT INTO FLOAT4_TBL(f1) VALUES ('1004.30   ');
--Testcase 3:
INSERT INTO FLOAT4_TBL(f1) VALUES ('     -34.84    ');
--Testcase 4:
INSERT INTO FLOAT4_TBL(f1) VALUES ('1.2345678901234e+20');
--Testcase 5:
INSERT INTO FLOAT4_TBL(f1) VALUES ('1.2345678901234e-20');
-- test for over and under flow
--Testcase 6:
INSERT INTO FLOAT4_TBL(f1) VALUES ('10e70');
ERROR:  value out of range: overflow
LINE 1: INSERT INTO FLOAT4_TBL(f1) VALUES ('10e70');
                                           ^
--Testcase 7:
INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e70');
ERROR:  value out of range: overflow
LINE 1: INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e70');
                                           ^
--Testcase 8:
INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-70');
ERROR:  value out of range: underflow
LINE 1: INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-70');
                                           ^
--Testcase 9:
INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-70');
ERROR:  value out of range: underflow
LINE 1: INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-70');
                                           ^
--Testcase 50:
INSERT INTO FLOAT4_TBL(f1) VALUES ('10e70'::float8);
ERROR:  value out of range: overflow
--Testcase 51:
INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e70'::float8);
ERROR:  value out of range: overflow
--Testcase 52:
INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-70'::float8);
ERROR:  value out of range: underflow
--Testcase 53:
INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-70'::float8);
ERROR:  value out of range: underflow
--Testcase 54:
INSERT INTO FLOAT4_TBL(f1) VALUES ('10e400');
ERROR:  "10e400" is out of range for type real
LINE 1: INSERT INTO FLOAT4_TBL(f1) VALUES ('10e400');
                                           ^
--Testcase 55:
INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e400');
ERROR:  "-10e400" is out of range for type real
LINE 1: INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e400');
                                           ^
--Testcase 56:
INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-400');
ERROR:  "10e-400" is out of range for type real
LINE 1: INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-400');
                                           ^
--Testcase 57:
INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-400');
ERROR:  "-10e-400" is out of range for type real
LINE 1: INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-400');
                                           ^
-- bad input
--Testcase 10:
INSERT INTO FLOAT4_TBL(f1) VALUES ('');
ERROR:  invalid input syntax for type real: ""
LINE 1: INSERT INTO FLOAT4_TBL(f1) VALUES ('');
                                           ^
--Testcase 11:
INSERT INTO FLOAT4_TBL(f1) VALUES ('       ');
ERROR:  invalid input syntax for type real: "       "
LINE 1: INSERT INTO FLOAT4_TBL(f1) VALUES ('       ');
                                           ^
--Testcase 12:
INSERT INTO FLOAT4_TBL(f1) VALUES ('xyz');
ERROR:  invalid input syntax for type real: "xyz"
LINE 1: INSERT INTO FLOAT4_TBL(f1) VALUES ('xyz');
                                           ^
--Testcase 13:
INSERT INTO FLOAT4_TBL(f1) VALUES ('5.0.0');
ERROR:  invalid input syntax for type real: "5.0.0"
LINE 1: INSERT INTO FLOAT4_TBL(f1) VALUES ('5.0.0');
                                           ^
--Testcase 14:
INSERT INTO FLOAT4_TBL(f1) VALUES ('5 . 0');
ERROR:  invalid input syntax for type real: "5 . 0"
LINE 1: INSERT INTO FLOAT4_TBL(f1) VALUES ('5 . 0');
                                           ^
--Testcase 15:
INSERT INTO FLOAT4_TBL(f1) VALUES ('5.   0');
ERROR:  invalid input syntax for type real: "5.   0"
LINE 1: INSERT INTO FLOAT4_TBL(f1) VALUES ('5.   0');
                                           ^
--Testcase 16:
INSERT INTO FLOAT4_TBL(f1) VALUES ('     - 3.0');
ERROR:  invalid input syntax for type real: "     - 3.0"
LINE 1: INSERT INTO FLOAT4_TBL(f1) VALUES ('     - 3.0');
                                           ^
--Testcase 17:
INSERT INTO FLOAT4_TBL(f1) VALUES ('123            5');
ERROR:  invalid input syntax for type real: "123            5"
LINE 1: INSERT INTO FLOAT4_TBL(f1) VALUES ('123            5');
                                           ^
-- special inputs
--Testcase 18:
DELETE FROM FLOAT4_TMP;
--Testcase 58:
INSERT INTO FLOAT4_TMP VALUES ('NaN'::float4);
--Testcase 59:
SELECT f1 FROM FLOAT4_TMP;
 f1 
----
   
(1 row)

--Testcase 20:
DELETE FROM FLOAT4_TMP;
--Testcase 60:
INSERT INTO FLOAT4_TMP VALUES ('nan'::float4);
--Testcase 61:
SELECT f1 FROM FLOAT4_TMP;
 f1 
----
   
(1 row)

--Testcase 21:
DELETE FROM FLOAT4_TMP;
--Testcase 62:
INSERT INTO FLOAT4_TMP VALUES ('   NAN  '::float4);
--Testcase 63:
SELECT f1 FROM FLOAT4_TMP;
 f1 
----
   
(1 row)

--Testcase 22:
DELETE FROM FLOAT4_TMP;
--Testcase 64:
INSERT INTO FLOAT4_TMP VALUES ('infinity'::float4);
--Testcase 65:
SELECT f1 FROM FLOAT4_TMP;
    f1    
----------
 Infinity
(1 row)

--Testcase 23:
DELETE FROM FLOAT4_TMP;
--Testcase 66:
INSERT INTO FLOAT4_TMP VALUES ('          -INFINiTY   '::float4);
--Testcase 67:
SELECT f1 FROM FLOAT4_TMP;
    f1     
-----------
 -Infinity
(1 row)

-- bad special inputs
--Testcase 25:
DELETE FROM FLOAT4_TMP;
--Testcase 68:
INSERT INTO FLOAT4_TMP VALUES ('N A N'::float4);
ERROR:  invalid input syntax for type real: "N A N"
LINE 1: INSERT INTO FLOAT4_TMP VALUES ('N A N'::float4);
                                       ^
--Testcase 69:
SELECT f1 FROM FLOAT4_TMP;
 f1 
----
(0 rows)

--Testcase 26:
DELETE FROM FLOAT4_TMP;
--Testcase 70:
INSERT INTO FLOAT4_TMP VALUES ('NaN x'::float4);
ERROR:  invalid input syntax for type real: "NaN x"
LINE 1: INSERT INTO FLOAT4_TMP VALUES ('NaN x'::float4);
                                       ^
--Testcase 71:
SELECT f1 FROM FLOAT4_TMP;
 f1 
----
(0 rows)

--Testcase 27:
DELETE FROM FLOAT4_TMP;
--Testcase 72:
INSERT INTO FLOAT4_TMP VALUES (' INFINITY    x'::float4);
ERROR:  invalid input syntax for type real: " INFINITY    x"
LINE 1: INSERT INTO FLOAT4_TMP VALUES (' INFINITY    x'::float4);
                                       ^
--Testcase 73:
SELECT f1 FROM FLOAT4_TMP;
 f1 
----
(0 rows)

--Testcase 28:
DELETE FROM FLOAT4_TMP;
--Testcase 74:
INSERT INTO FLOAT4_TMP VALUES ('Infinity'::float4 + 100.0);
--Testcase 75:
SELECT f1 FROM FLOAT4_TMP;
    f1    
----------
 Infinity
(1 row)

--Testcase 30:
DELETE FROM FLOAT4_TMP;
--Testcase 76:
INSERT INTO FLOAT4_TMP VALUES ('Infinity'::float4 / 'Infinity'::float4);
--Testcase 77:
SELECT f1 FROM FLOAT4_TMP;
 f1 
----
   
(1 row)

--Testcase 31:
DELETE FROM FLOAT4_TMP;
--Testcase 78:
INSERT INTO FLOAT4_TMP VALUES ('nan'::float4 / 'nan'::float4);
--Testcase 79:
SELECT f1 FROM FLOAT4_TMP;
 f1 
----
   
(1 row)

--Testcase 32:
DELETE FROM FLOAT4_TMP;
--Testcase 80:
INSERT INTO FLOAT4_TMP VALUES ('nan'::numeric::float4);
--Testcase 81:
SELECT f1 FROM FLOAT4_TMP;
 f1 
----
   
(1 row)

--Testcase 34:
SELECT '' AS five, * FROM FLOAT4_TBL;
 five |     f1      
------+-------------
      |           0
      |      1004.3
      |      -34.84
      | 1.23457e+20
      | 1.23457e-20
(5 rows)

--SELECT '' AS four, f.* FROM FLOAT4_TBL f WHERE f.f1 <> '1004.3';
--SELECT '' AS one, f.* FROM FLOAT4_TBL f WHERE f.f1 = '1004.3';
--SELECT '' AS three, f.* FROM FLOAT4_TBL f WHERE '1004.3' > f.f1;
--SELECT '' AS three, f.* FROM FLOAT4_TBL f WHERE  f.f1 < '1004.3';
--Testcase 35:
SELECT '' AS four, f.* FROM FLOAT4_TBL f WHERE '1004.3' >= f.f1;
 four |     f1      
------+-------------
      |           0
      |      1004.3
      |      -34.84
      | 1.23457e-20
(4 rows)

--Testcase 36:
SELECT '' AS four, f.* FROM FLOAT4_TBL f WHERE  f.f1 <= '1004.3';
 four |     f1      
------+-------------
      |           0
      |      1004.3
      |      -34.84
      | 1.23457e-20
(4 rows)

--Testcase 37:
SELECT '' AS three, f.f1, f.f1 * '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
 three |     f1      |      x       
-------+-------------+--------------
       |      1004.3 |       -10043
       | 1.23457e+20 | -1.23457e+21
       | 1.23457e-20 | -1.23457e-19
(3 rows)

--Testcase 38:
SELECT '' AS three, f.f1, f.f1 + '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
 three |     f1      |      x      
-------+-------------+-------------
       |      1004.3 |       994.3
       | 1.23457e+20 | 1.23457e+20
       | 1.23457e-20 |         -10
(3 rows)

--Testcase 39:
SELECT '' AS three, f.f1, f.f1 / '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
 three |     f1      |      x       
-------+-------------+--------------
       |      1004.3 |      -100.43
       | 1.23457e+20 | -1.23457e+19
       | 1.23457e-20 | -1.23457e-21
(3 rows)

--Testcase 40:
SELECT '' AS three, f.f1, f.f1 - '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
 three |     f1      |      x      
-------+-------------+-------------
       |      1004.3 |      1014.3
       | 1.23457e+20 | 1.23457e+20
       | 1.23457e-20 |          10
(3 rows)

-- test divide by zero
--Testcase 41:
SELECT '' AS bad, f.f1 / '0.0' from FLOAT4_TBL f;
ERROR:  division by zero
--Testcase 42:
SELECT '' AS five, * FROM FLOAT4_TBL;
 five |     f1      
------+-------------
      |           0
      |      1004.3
      |      -34.84
      | 1.23457e+20
      | 1.23457e-20
(5 rows)

-- test the unary float4abs operator
--Testcase 43:
SELECT '' AS five, f.f1, @f.f1 AS abs_f1 FROM FLOAT4_TBL f;
 five |     f1      |   abs_f1    
------+-------------+-------------
      |           0 |           0
      |      1004.3 |      1004.3
      |      -34.84 |       34.84
      | 1.23457e+20 | 1.23457e+20
      | 1.23457e-20 | 1.23457e-20
(5 rows)

--Testcase 44:
UPDATE FLOAT4_TBL
   SET f1 = FLOAT4_TBL.f1 * '-1'
   WHERE FLOAT4_TBL.f1 > '0.0';
--Testcase 45:
SELECT '' AS five, * FROM FLOAT4_TBL;
 five |      f1      
------+--------------
      |            0
      |      -1004.3
      |       -34.84
      | -1.23457e+20
      | -1.23457e-20
(5 rows)

-- test edge-case coercions to integer
--Testcase 82:
DELETE FROM FLOAT4_TMP;
--Testcase 83:
INSERT INTO FLOAT4_TMP VALUES ('32767.4'::float4);
--Testcase 84:
SELECT f1::int2 FROM FLOAT4_TMP;
  f1   
-------
 32767
(1 row)

--Testcase 85:
DELETE FROM FLOAT4_TMP;
--Testcase 86:
INSERT INTO FLOAT4_TMP VALUES ('32767.6'::float4);
--Testcase 87:
SELECT f1::int2 FROM FLOAT4_TMP;
ERROR:  smallint out of range
--Testcase 88:
DELETE FROM FLOAT4_TMP;
--Testcase 89:
INSERT INTO FLOAT4_TMP VALUES ('-32768.4'::float4);
--Testcase 90:
SELECT f1::int2 FROM FLOAT4_TMP;
   f1   
--------
 -32768
(1 row)

--Testcase 91:
DELETE FROM FLOAT4_TMP;
--Testcase 92:
INSERT INTO FLOAT4_TMP VALUES ('-32768.6'::float4);
--Testcase 93:
SELECT f1::int2 FROM FLOAT4_TMP;
ERROR:  smallint out of range
--Testcase 94:
DELETE FROM FLOAT4_TMP;
--Testcase 95:
INSERT INTO FLOAT4_TMP VALUES ('2147483520'::float4);
--Testcase 96:
SELECT f1::int4 FROM FLOAT4_TMP;
     f1     
------------
 2147483520
(1 row)

--Testcase 97:
DELETE FROM FLOAT4_TMP;
--Testcase 98:
INSERT INTO FLOAT4_TMP VALUES ('2147483647'::float4);
--Testcase 99:
SELECT f1::int4 FROM FLOAT4_TMP;
ERROR:  integer out of range
--Testcase 100:
DELETE FROM FLOAT4_TMP;
--Testcase 101:
INSERT INTO FLOAT4_TMP VALUES ('-2147483648.5'::float4);
--Testcase 102:
SELECT f1::int4 FROM FLOAT4_TMP;
     f1      
-------------
 -2147483648
(1 row)

--Testcase 103:
DELETE FROM FLOAT4_TMP;
--Testcase 104:
INSERT INTO FLOAT4_TMP VALUES ('-2147483900'::float4);
--Testcase 105:
SELECT f1::int4 FROM FLOAT4_TMP;
ERROR:  integer out of range
--Testcase 106:
DELETE FROM FLOAT4_TMP;
--Testcase 107:
INSERT INTO FLOAT4_TMP VALUES ('9223369837831520256'::float4);
--Testcase 108:
SELECT f1::int8 FROM FLOAT4_TMP;
         f1          
---------------------
 9223369837831520256
(1 row)

--Testcase 109:
DELETE FROM FLOAT4_TMP;
--Testcase 110:
INSERT INTO FLOAT4_TMP VALUES ('9223372036854775807'::float4);
--Testcase 111:
SELECT f1::int8 FROM FLOAT4_TMP;
ERROR:  bigint out of range
--Testcase 112:
DELETE FROM FLOAT4_TMP;
--Testcase 113:
INSERT INTO FLOAT4_TMP VALUES ('-9223372036854775808.5'::float4);
--Testcase 114:
SELECT f1::int8 FROM FLOAT4_TMP;
          f1          
----------------------
 -9223372036854775808
(1 row)

--Testcase 115:
DELETE FROM FLOAT4_TMP;
--Testcase 116:
INSERT INTO FLOAT4_TMP VALUES ('-9223380000000000000'::float4);
--Testcase 117:
SELECT f1::int8 FROM FLOAT4_TMP;
ERROR:  bigint out of range
-- Test for correct input rounding in edge cases.
-- These lists are from Paxson 1991, excluding subnormals and
-- inputs of over 9 sig. digits.
--Testcase 118:
DELETE FROM FLOAT4_TMP;
--Testcase 119:
INSERT INTO FLOAT4_TMP VALUES ('5e-20'::float4);
--Testcase 120:
SELECT float4send(f1) FROM FLOAT4_TMP;
 float4send 
------------
 \x1f6c1e4a
(1 row)

--Testcase 121:
DELETE FROM FLOAT4_TMP;
--Testcase 122:
INSERT INTO FLOAT4_TMP VALUES ('67e14'::float4);
--Testcase 123:
SELECT float4send(f1) FROM FLOAT4_TMP;
 float4send 
------------
 \x59be6cea
(1 row)

--Testcase 124:
DELETE FROM FLOAT4_TMP;
--Testcase 125:
INSERT INTO FLOAT4_TMP VALUES ('985e15'::float4);
--Testcase 126:
SELECT float4send(f1) FROM FLOAT4_TMP;
 float4send 
------------
 \x5d5ab6c4
(1 row)

--Testcase 127:
DELETE FROM FLOAT4_TMP;
--Testcase 128:
INSERT INTO FLOAT4_TMP VALUES ('55895e-16'::float4);
--Testcase 129:
SELECT float4send(f1) FROM FLOAT4_TMP;
 float4send 
------------
 \x2cc4a9bd
(1 row)

--Testcase 130:
DELETE FROM FLOAT4_TMP;
--Testcase 131:
INSERT INTO FLOAT4_TMP VALUES ('7038531e-32'::float4);
--Testcase 132:
SELECT float4send(f1) FROM FLOAT4_TMP;
 float4send 
------------
 \x15ae43fe
(1 row)

--Testcase 133:
DELETE FROM FLOAT4_TMP;
--Testcase 134:
INSERT INTO FLOAT4_TMP VALUES ('702990899e-20'::float4);
--Testcase 135:
SELECT float4send(f1) FROM FLOAT4_TMP;
 float4send 
------------
 \x2cf757ca
(1 row)

--Testcase 136:
DELETE FROM FLOAT4_TMP;
--Testcase 137:
INSERT INTO FLOAT4_TMP VALUES ('3e-23'::float4);
--Testcase 138:
SELECT float4send(f1) FROM FLOAT4_TMP;
 float4send 
------------
 \x1a111234
(1 row)

--Testcase 139:
DELETE FROM FLOAT4_TMP;
--Testcase 140:
INSERT INTO FLOAT4_TMP VALUES ('57e18'::float4);
--Testcase 141:
SELECT float4send(f1) FROM FLOAT4_TMP;
 float4send 
------------
 \x6045c22c
(1 row)

--Testcase 142:
DELETE FROM FLOAT4_TMP;
--Testcase 143:
INSERT INTO FLOAT4_TMP VALUES ('789e-35'::float4);
--Testcase 144:
SELECT float4send(f1) FROM FLOAT4_TMP;
 float4send 
------------
 \x0a23de70
(1 row)

--Testcase 145:
DELETE FROM FLOAT4_TMP;
--Testcase 146:
INSERT INTO FLOAT4_TMP VALUES ('2539e-18'::float4);
--Testcase 147:
SELECT float4send(f1) FROM FLOAT4_TMP;
 float4send 
------------
 \x2736f449
(1 row)

--Testcase 148:
DELETE FROM FLOAT4_TMP;
--Testcase 149:
INSERT INTO FLOAT4_TMP VALUES ('76173e28'::float4);
--Testcase 150:
SELECT float4send(f1) FROM FLOAT4_TMP;
 float4send 
------------
 \x7616398a
(1 row)

--Testcase 151:
DELETE FROM FLOAT4_TMP;
--Testcase 152:
INSERT INTO FLOAT4_TMP VALUES ('887745e-11'::float4);
--Testcase 153:
SELECT float4send(f1) FROM FLOAT4_TMP;
 float4send 
------------
 \x3714f05c
(1 row)

--Testcase 154:
DELETE FROM FLOAT4_TMP;
--Testcase 155:
INSERT INTO FLOAT4_TMP VALUES ('5382571e-37'::float4);
--Testcase 156:
SELECT float4send(f1) FROM FLOAT4_TMP;
 float4send 
------------
 \x0d2eaca7
(1 row)

--Testcase 157:
DELETE FROM FLOAT4_TMP;
--Testcase 158:
INSERT INTO FLOAT4_TMP VALUES ('82381273e-35'::float4);
--Testcase 159:
SELECT float4send(f1) FROM FLOAT4_TMP;
 float4send 
------------
 \x128289d0
(1 row)

--Testcase 160:
DELETE FROM FLOAT4_TMP;
--Testcase 161:
INSERT INTO FLOAT4_TMP VALUES ('750486563e-38'::float4);
--Testcase 162:
SELECT float4send(f1) FROM FLOAT4_TMP;
 float4send 
------------
 \x0f18377e
(1 row)

-- Test that the smallest possible normalized input value inputs
-- correctly, either in 9-significant-digit or shortest-decimal
-- format.
--
-- exact val is             1.1754943508...
-- shortest val is          1.1754944000
-- midpoint to next val is  1.1754944208...
--Testcase 163:
DELETE FROM FLOAT4_TMP;
--Testcase 164:
INSERT INTO FLOAT4_TMP VALUES ('1.17549435e-38'::float4);
--Testcase 165:
SELECT float4send(f1) FROM FLOAT4_TMP;
 float4send 
------------
 \x00800000
(1 row)

--Testcase 166:
DELETE FROM FLOAT4_TMP;
--Testcase 167:
INSERT INTO FLOAT4_TMP VALUES('1.1754944e-38'::float4);
--Testcase 168:
SELECT float4send(f1) FROM FLOAT4_TMP;
 float4send 
------------
 \x00800000
(1 row)

-- test output (and round-trip safety) of various values.
-- To ensure we're testing what we think we're testing, start with
-- float values specified by bit patterns (as a useful side effect,
-- this means we'll fail on non-IEEE platforms).
--Testcase 169:
create type xfloat4;
--Testcase 170:
create function xfloat4in(cstring) returns xfloat4 immutable strict
  language internal as 'int4in';
NOTICE:  return type xfloat4 is only a shell
--Testcase 171:
create function xfloat4out(xfloat4) returns cstring immutable strict
  language internal as 'int4out';
NOTICE:  argument type xfloat4 is only a shell
--Testcase 172:
create type xfloat4 (input = xfloat4in, output = xfloat4out, like = float4);
--Testcase 173:
create cast (xfloat4 as float4) without function;
--Testcase 174:
create cast (float4 as xfloat4) without function;
--Testcase 175:
create cast (xfloat4 as integer) without function;
--Testcase 176:
create cast (integer as xfloat4) without function;
-- float4: seeeeeee emmmmmmm mmmmmmmm mmmmmmmm
-- we don't care to assume the platform's strtod() handles subnormals
-- correctly; those are "use at your own risk". However we do test
-- subnormal outputs, since those are under our control.
--Testcase 177:
create foreign table testdata(bits text, id int OPTIONS (key 'true')) server sqlite_svr;
begin;
--Testcase 178:
insert into testdata(bits) values
  -- small subnormals
  (x'00000001'),
  (x'00000002'), (x'00000003'),
  (x'00000010'), (x'00000011'), (x'00000100'), (x'00000101'),
  (x'00004000'), (x'00004001'), (x'00080000'), (x'00080001'),
  -- stress values
  (x'0053c4f4'),  -- 7693e-42
  (x'006c85c4'),  -- 996622e-44
  (x'0041ca76'),  -- 60419369e-46
  (x'004b7678'),  -- 6930161142e-48
  -- taken from upstream testsuite
  (x'00000007'),
  (x'00424fe2'),
  -- borderline between subnormal and normal
  (x'007ffff0'), (x'007ffff1'), (x'007ffffe'), (x'007fffff');
--Testcase 179:
select float4send(flt) as ibits,
       flt
  from (select bits::bit(32)::integer::xfloat4::float4 as flt
          from testdata
	offset 0) s;
   ibits    |     flt     
------------+-------------
 \x00000001 |  1.4013e-45
 \x00000002 |  2.8026e-45
 \x00000003 |  4.2039e-45
 \x00000010 | 2.24208e-44
 \x00000011 | 2.38221e-44
 \x00000100 | 3.58732e-43
 \x00000101 | 3.60134e-43
 \x00004000 | 2.29589e-41
 \x00004001 | 2.29603e-41
 \x00080000 | 7.34684e-40
 \x00080001 | 7.34685e-40
 \x0053c4f4 |   7.693e-39
 \x006c85c4 | 9.96622e-39
 \x0041ca76 | 6.04194e-39
 \x004b7678 | 6.93016e-39
 \x00000007 | 9.80909e-45
 \x00424fe2 |  6.0898e-39
 \x007ffff0 | 1.17549e-38
 \x007ffff1 | 1.17549e-38
 \x007ffffe | 1.17549e-38
 \x007fffff | 1.17549e-38
(21 rows)

rollback;
begin;
--Testcase 180:
insert into testdata(bits) values
  (x'00000000'),
  -- smallest normal values
  (x'00800000'), (x'00800001'), (x'00800004'), (x'00800005'),
  (x'00800006'),
  -- small normal values chosen for short vs. long output
  (x'008002f1'), (x'008002f2'), (x'008002f3'),
  (x'00800e17'), (x'00800e18'), (x'00800e19'),
  -- assorted values (random mantissae)
  (x'01000001'), (x'01102843'), (x'01a52c98'),
  (x'0219c229'), (x'02e4464d'), (x'037343c1'), (x'03a91b36'),
  (x'047ada65'), (x'0496fe87'), (x'0550844f'), (x'05999da3'),
  (x'060ea5e2'), (x'06e63c45'), (x'07f1e548'), (x'0fc5282b'),
  (x'1f850283'), (x'2874a9d6'),
  -- values around 5e-08
  (x'3356bf94'), (x'3356bf95'), (x'3356bf96'),
  -- around 1e-07
  (x'33d6bf94'), (x'33d6bf95'), (x'33d6bf96'),
  -- around 3e-07 .. 1e-04
  (x'34a10faf'), (x'34a10fb0'), (x'34a10fb1'),
  (x'350637bc'), (x'350637bd'), (x'350637be'),
  (x'35719786'), (x'35719787'), (x'35719788'),
  (x'358637bc'), (x'358637bd'), (x'358637be'),
  (x'36a7c5ab'), (x'36a7c5ac'), (x'36a7c5ad'),
  (x'3727c5ab'), (x'3727c5ac'), (x'3727c5ad'),
  -- format crossover at 1e-04
  (x'38d1b714'), (x'38d1b715'), (x'38d1b716'),
  (x'38d1b717'), (x'38d1b718'), (x'38d1b719'),
  (x'38d1b71a'), (x'38d1b71b'), (x'38d1b71c'),
  (x'38d1b71d'),
  --
  (x'38dffffe'), (x'38dfffff'), (x'38e00000'),
  (x'38efffff'), (x'38f00000'), (x'38f00001'),
  (x'3a83126e'), (x'3a83126f'), (x'3a831270'),
  (x'3c23d709'), (x'3c23d70a'), (x'3c23d70b'),
  (x'3dcccccc'), (x'3dcccccd'), (x'3dccccce'),
  -- chosen to need 9 digits for 3dcccd70
  (x'3dcccd6f'), (x'3dcccd70'), (x'3dcccd71'),
  --
  (x'3effffff'), (x'3f000000'), (x'3f000001'),
  (x'3f333332'), (x'3f333333'), (x'3f333334'),
  -- approach 1.0 with increasing numbers of 9s
  (x'3f666665'), (x'3f666666'), (x'3f666667'),
  (x'3f7d70a3'), (x'3f7d70a4'), (x'3f7d70a5'),
  (x'3f7fbe76'), (x'3f7fbe77'), (x'3f7fbe78'),
  (x'3f7ff971'), (x'3f7ff972'), (x'3f7ff973'),
  (x'3f7fff57'), (x'3f7fff58'), (x'3f7fff59'),
  (x'3f7fffee'), (x'3f7fffef'),
  -- values very close to 1
  (x'3f7ffff0'), (x'3f7ffff1'), (x'3f7ffff2'),
  (x'3f7ffff3'), (x'3f7ffff4'), (x'3f7ffff5'),
  (x'3f7ffff6'), (x'3f7ffff7'), (x'3f7ffff8'),
  (x'3f7ffff9'), (x'3f7ffffa'), (x'3f7ffffb'),
  (x'3f7ffffc'), (x'3f7ffffd'), (x'3f7ffffe'),
  (x'3f7fffff'),
  (x'3f800000'),
  (x'3f800001'), (x'3f800002'), (x'3f800003'),
  (x'3f800004'), (x'3f800005'), (x'3f800006'),
  (x'3f800007'), (x'3f800008'), (x'3f800009'),
  -- values 1 to 1.1
  (x'3f80000f'), (x'3f800010'), (x'3f800011'),
  (x'3f800012'), (x'3f800013'), (x'3f800014'),
  (x'3f800017'), (x'3f800018'), (x'3f800019'),
  (x'3f80001a'), (x'3f80001b'), (x'3f80001c'),
  (x'3f800029'), (x'3f80002a'), (x'3f80002b'),
  (x'3f800053'), (x'3f800054'), (x'3f800055'),
  (x'3f800346'), (x'3f800347'), (x'3f800348'),
  (x'3f8020c4'), (x'3f8020c5'), (x'3f8020c6'),
  (x'3f8147ad'), (x'3f8147ae'), (x'3f8147af'),
  (x'3f8ccccc'), (x'3f8ccccd'), (x'3f8cccce'),
  --
  (x'3fc90fdb'), -- pi/2
  (x'402df854'), -- e
  (x'40490fdb'), -- pi
  --
  (x'409fffff'), (x'40a00000'), (x'40a00001'),
  (x'40afffff'), (x'40b00000'), (x'40b00001'),
  (x'411fffff'), (x'41200000'), (x'41200001'),
  (x'42c7ffff'), (x'42c80000'), (x'42c80001'),
  (x'4479ffff'), (x'447a0000'), (x'447a0001'),
  (x'461c3fff'), (x'461c4000'), (x'461c4001'),
  (x'47c34fff'), (x'47c35000'), (x'47c35001'),
  (x'497423ff'), (x'49742400'), (x'49742401'),
  (x'4b18967f'), (x'4b189680'), (x'4b189681'),
  (x'4cbebc1f'), (x'4cbebc20'), (x'4cbebc21'),
  (x'4e6e6b27'), (x'4e6e6b28'), (x'4e6e6b29'),
  (x'501502f8'), (x'501502f9'), (x'501502fa'),
  (x'51ba43b6'), (x'51ba43b7'), (x'51ba43b8'),
  -- stress values
  (x'1f6c1e4a'),  -- 5e-20
  (x'59be6cea'),  -- 67e14
  (x'5d5ab6c4'),  -- 985e15
  (x'2cc4a9bd'),  -- 55895e-16
  (x'15ae43fd'),  -- 7038531e-32
  (x'2cf757ca'),  -- 702990899e-20
  (x'665ba998'),  -- 25933168707e13
  (x'743c3324'),  -- 596428896559e20
  -- exercise fixed-point memmoves
  (x'47f1205a'),
  (x'4640e6ae'),
  (x'449a5225'),
  (x'42f6e9d5'),
  (x'414587dd'),
  (x'3f9e064b'),
  -- these cases come from the upstream's testsuite
  -- BoundaryRoundEven
  (x'4c000004'),
  (x'50061c46'),
  (x'510006a8'),
  -- ExactValueRoundEven
  (x'48951f84'),
  (x'45fd1840'),
  -- LotsOfTrailingZeros
  (x'39800000'),
  (x'3b200000'),
  (x'3b900000'),
  (x'3bd00000'),
  -- Regression
  (x'63800000'),
  (x'4b000000'),
  (x'4b800000'),
  (x'4c000001'),
  (x'4c800b0d'),
  (x'00d24584'),
  (x'00d90b88'),
  (x'45803f34'),
  (x'4f9f24f7'),
  (x'3a8722c3'),
  (x'5c800041'),
  (x'15ae43fd'),
  (x'5d4cccfb'),
  (x'4c800001'),
  (x'57800ed8'),
  (x'5f000000'),
  (x'700000f0'),
  (x'5f23e9ac'),
  (x'5e9502f9'),
  (x'5e8012b1'),
  (x'3c000028'),
  (x'60cde861'),
  (x'03aa2a50'),
  (x'43480000'),
  (x'4c000000'),
  -- LooksLikePow5
  (x'5D1502F9'),
  (x'5D9502F9'),
  (x'5E1502F9'),
  -- OutputLength
  (x'3f99999a'),
  (x'3f9d70a4'),
  (x'3f9df3b6'),
  (x'3f9e0419'),
  (x'3f9e0610'),
  (x'3f9e064b'),
  (x'3f9e0651'),
  (x'03d20cfe');
--Testcase 181:
select float4send(flt) as ibits,
       flt,
       flt::text::float4 as r_flt,
       float4send(flt::text::float4) as obits,
       float4send(flt::text::float4) = float4send(flt) as correct
  from (select bits::bit(32)::integer::xfloat4::float4 as flt
          from testdata
	offset 0) s;
   ibits    |     flt     |    r_flt    |   obits    | correct 
------------+-------------+-------------+------------+---------
 \x00000000 |           0 |           0 | \x00000000 | t
 \x00800000 | 1.17549e-38 | 1.17549e-38 | \x007fffe1 | f
 \x00800001 | 1.17549e-38 | 1.17549e-38 | \x007fffe1 | f
 \x00800004 | 1.17549e-38 | 1.17549e-38 | \x007fffe1 | f
 \x00800005 |  1.1755e-38 |  1.1755e-38 | \x00800028 | f
 \x00800006 |  1.1755e-38 |  1.1755e-38 | \x00800028 | f
 \x008002f1 |  1.1756e-38 |  1.1756e-38 | \x008002f2 | f
 \x008002f2 |  1.1756e-38 |  1.1756e-38 | \x008002f2 | t
 \x008002f3 |  1.1756e-38 |  1.1756e-38 | \x008002f2 | f
 \x00800e17 |   1.176e-38 |   1.176e-38 | \x00800e18 | f
 \x00800e18 |   1.176e-38 |   1.176e-38 | \x00800e18 | t
 \x00800e19 |   1.176e-38 |   1.176e-38 | \x00800e18 | f
 \x01000001 | 2.35099e-38 | 2.35099e-38 | \x01000005 | f
 \x01102843 | 2.64775e-38 | 2.64775e-38 | \x01102840 | f
 \x01a52c98 | 6.06754e-38 | 6.06754e-38 | \x01a52c95 | f
 \x0219c229 | 1.12964e-37 | 1.12964e-37 | \x0219c236 | f
 \x02e4464d | 3.35419e-37 | 3.35419e-37 | \x02e4463b | f
 \x037343c1 | 7.14891e-37 | 7.14891e-37 | \x037343ca | f
 \x03a91b36 | 9.93917e-37 | 9.93917e-37 | \x03a91b31 | f
 \x047ada65 | 2.94876e-36 | 2.94876e-36 | \x047ada4e | f
 \x0496fe87 | 3.54986e-36 | 3.54986e-36 | \x0496fe8d | f
 \x0550844f | 9.80441e-36 | 9.80441e-36 | \x05508449 | f
 \x05999da3 |  1.4446e-35 |  1.4446e-35 | \x05999dc1 | f
 \x060ea5e2 | 2.68291e-35 | 2.68291e-35 | \x060ea5e1 | f
 \x06e63c45 | 8.66049e-35 | 8.66049e-35 | \x06e63c3e | f
 \x07f1e548 | 3.63964e-34 | 3.63964e-34 | \x07f1e544 | f
 \x0fc5282b | 1.94412e-29 | 1.94412e-29 | \x0fc5283e | f
 \x1f850283 | 5.63318e-20 | 5.63318e-20 | \x1f85027c | f
 \x2874a9d6 | 1.35815e-14 | 1.35815e-14 | \x2874a99d | f
 \x3356bf94 |       5e-08 |       5e-08 | \x3356bf95 | f
 \x3356bf95 |       5e-08 |       5e-08 | \x3356bf95 | t
 \x3356bf96 |       5e-08 |       5e-08 | \x3356bf95 | f
 \x33d6bf94 |       1e-07 |       1e-07 | \x33d6bf95 | f
 \x33d6bf95 |       1e-07 |       1e-07 | \x33d6bf95 | t
 \x33d6bf96 |       1e-07 |       1e-07 | \x33d6bf95 | f
 \x34a10faf |       3e-07 |       3e-07 | \x34a10fb0 | f
 \x34a10fb0 |       3e-07 |       3e-07 | \x34a10fb0 | t
 \x34a10fb1 |       3e-07 |       3e-07 | \x34a10fb0 | f
 \x350637bc |       5e-07 |       5e-07 | \x350637bd | f
 \x350637bd |       5e-07 |       5e-07 | \x350637bd | t
 \x350637be |       5e-07 |       5e-07 | \x350637bd | f
 \x35719786 |       9e-07 |       9e-07 | \x35719787 | f
 \x35719787 |       9e-07 |       9e-07 | \x35719787 | t
 \x35719788 |       9e-07 |       9e-07 | \x35719787 | f
 \x358637bc |       1e-06 |       1e-06 | \x358637bd | f
 \x358637bd |       1e-06 |       1e-06 | \x358637bd | t
 \x358637be |       1e-06 |       1e-06 | \x358637bd | f
 \x36a7c5ab |       5e-06 |       5e-06 | \x36a7c5ac | f
 \x36a7c5ac |       5e-06 |       5e-06 | \x36a7c5ac | t
 \x36a7c5ad |       5e-06 |       5e-06 | \x36a7c5ac | f
 \x3727c5ab |       1e-05 |       1e-05 | \x3727c5ac | f
 \x3727c5ac |       1e-05 |       1e-05 | \x3727c5ac | t
 \x3727c5ad |       1e-05 |       1e-05 | \x3727c5ac | f
 \x38d1b714 |      0.0001 |      0.0001 | \x38d1b717 | f
 \x38d1b715 |      0.0001 |      0.0001 | \x38d1b717 | f
 \x38d1b716 |      0.0001 |      0.0001 | \x38d1b717 | f
 \x38d1b717 |      0.0001 |      0.0001 | \x38d1b717 | t
 \x38d1b718 |      0.0001 |      0.0001 | \x38d1b717 | f
 \x38d1b719 |      0.0001 |      0.0001 | \x38d1b717 | f
 \x38d1b71a |      0.0001 |      0.0001 | \x38d1b717 | f
 \x38d1b71b |      0.0001 |      0.0001 | \x38d1b717 | f
 \x38d1b71c |      0.0001 |      0.0001 | \x38d1b717 | f
 \x38d1b71d |      0.0001 |      0.0001 | \x38d1b717 | f
 \x38dffffe | 0.000106812 | 0.000106812 | \x38e00041 | f
 \x38dfffff | 0.000106812 | 0.000106812 | \x38e00041 | f
 \x38e00000 | 0.000106812 | 0.000106812 | \x38e00041 | f
 \x38efffff | 0.000114441 | 0.000114441 | \x38f0000b | f
 \x38f00000 | 0.000114441 | 0.000114441 | \x38f0000b | f
 \x38f00001 | 0.000114441 | 0.000114441 | \x38f0000b | f
 \x3a83126e |       0.001 |       0.001 | \x3a83126f | f
 \x3a83126f |       0.001 |       0.001 | \x3a83126f | t
 \x3a831270 |       0.001 |       0.001 | \x3a83126f | f
 \x3c23d709 |        0.01 |        0.01 | \x3c23d70a | f
 \x3c23d70a |        0.01 |        0.01 | \x3c23d70a | t
 \x3c23d70b |        0.01 |        0.01 | \x3c23d70a | f
 \x3dcccccc |         0.1 |         0.1 | \x3dcccccd | f
 \x3dcccccd |         0.1 |         0.1 | \x3dcccccd | t
 \x3dccccce |         0.1 |         0.1 | \x3dcccccd | f
 \x3dcccd6f |    0.100001 |    0.100001 | \x3dcccd53 | f
 \x3dcccd70 |    0.100001 |    0.100001 | \x3dcccd53 | f
 \x3dcccd71 |    0.100001 |    0.100001 | \x3dcccd53 | f
 \x3effffff |         0.5 |         0.5 | \x3f000000 | f
 \x3f000000 |         0.5 |         0.5 | \x3f000000 | t
 \x3f000001 |         0.5 |         0.5 | \x3f000000 | f
 \x3f333332 |         0.7 |         0.7 | \x3f333333 | f
 \x3f333333 |         0.7 |         0.7 | \x3f333333 | t
 \x3f333334 |         0.7 |         0.7 | \x3f333333 | f
 \x3f666665 |         0.9 |         0.9 | \x3f666666 | f
 \x3f666666 |         0.9 |         0.9 | \x3f666666 | t
 \x3f666667 |         0.9 |         0.9 | \x3f666666 | f
 \x3f7d70a3 |        0.99 |        0.99 | \x3f7d70a4 | f
 \x3f7d70a4 |        0.99 |        0.99 | \x3f7d70a4 | t
 \x3f7d70a5 |        0.99 |        0.99 | \x3f7d70a4 | f
 \x3f7fbe76 |       0.999 |       0.999 | \x3f7fbe77 | f
 \x3f7fbe77 |       0.999 |       0.999 | \x3f7fbe77 | t
 \x3f7fbe78 |       0.999 |       0.999 | \x3f7fbe77 | f
 \x3f7ff971 |      0.9999 |      0.9999 | \x3f7ff972 | f
 \x3f7ff972 |      0.9999 |      0.9999 | \x3f7ff972 | t
 \x3f7ff973 |      0.9999 |      0.9999 | \x3f7ff972 | f
 \x3f7fff57 |     0.99999 |     0.99999 | \x3f7fff58 | f
 \x3f7fff58 |     0.99999 |     0.99999 | \x3f7fff58 | t
 \x3f7fff59 |     0.99999 |     0.99999 | \x3f7fff58 | f
 \x3f7fffee |    0.999999 |    0.999999 | \x3f7fffef | f
 \x3f7fffef |    0.999999 |    0.999999 | \x3f7fffef | t
 \x3f7ffff0 |    0.999999 |    0.999999 | \x3f7fffef | f
 \x3f7ffff1 |    0.999999 |    0.999999 | \x3f7fffef | f
 \x3f7ffff2 |    0.999999 |    0.999999 | \x3f7fffef | f
 \x3f7ffff3 |    0.999999 |    0.999999 | \x3f7fffef | f
 \x3f7ffff4 |    0.999999 |    0.999999 | \x3f7fffef | f
 \x3f7ffff5 |    0.999999 |    0.999999 | \x3f7fffef | f
 \x3f7ffff6 |    0.999999 |    0.999999 | \x3f7fffef | f
 \x3f7ffff7 |    0.999999 |    0.999999 | \x3f7fffef | f
 \x3f7ffff8 |           1 |           1 | \x3f800000 | f
 \x3f7ffff9 |           1 |           1 | \x3f800000 | f
 \x3f7ffffa |           1 |           1 | \x3f800000 | f
 \x3f7ffffb |           1 |           1 | \x3f800000 | f
 \x3f7ffffc |           1 |           1 | \x3f800000 | f
 \x3f7ffffd |           1 |           1 | \x3f800000 | f
 \x3f7ffffe |           1 |           1 | \x3f800000 | f
 \x3f7fffff |           1 |           1 | \x3f800000 | f
 \x3f800000 |           1 |           1 | \x3f800000 | t
 \x3f800001 |           1 |           1 | \x3f800000 | f
 \x3f800002 |           1 |           1 | \x3f800000 | f
 \x3f800003 |           1 |           1 | \x3f800000 | f
 \x3f800004 |           1 |           1 | \x3f800000 | f
 \x3f800005 |           1 |           1 | \x3f800000 | f
 \x3f800006 |           1 |           1 | \x3f800000 | f
 \x3f800007 |           1 |           1 | \x3f800000 | f
 \x3f800008 |           1 |           1 | \x3f800000 | f
 \x3f800009 |           1 |           1 | \x3f800000 | f
 \x3f80000f |           1 |           1 | \x3f800000 | f
 \x3f800010 |           1 |           1 | \x3f800000 | f
 \x3f800011 |           1 |           1 | \x3f800000 | f
 \x3f800012 |           1 |           1 | \x3f800000 | f
 \x3f800013 |           1 |           1 | \x3f800000 | f
 \x3f800014 |           1 |           1 | \x3f800000 | f
 \x3f800017 |           1 |           1 | \x3f800000 | f
 \x3f800018 |           1 |           1 | \x3f800000 | f
 \x3f800019 |           1 |           1 | \x3f800000 | f
 \x3f80001a |           1 |           1 | \x3f800000 | f
 \x3f80001b |           1 |           1 | \x3f800000 | f
 \x3f80001c |           1 |           1 | \x3f800000 | f
 \x3f800029 |           1 |           1 | \x3f800000 | f
 \x3f80002a |     1.00001 |     1.00001 | \x3f800054 | f
 \x3f80002b |     1.00001 |     1.00001 | \x3f800054 | f
 \x3f800053 |     1.00001 |     1.00001 | \x3f800054 | f
 \x3f800054 |     1.00001 |     1.00001 | \x3f800054 | t
 \x3f800055 |     1.00001 |     1.00001 | \x3f800054 | f
 \x3f800346 |      1.0001 |      1.0001 | \x3f800347 | f
 \x3f800347 |      1.0001 |      1.0001 | \x3f800347 | t
 \x3f800348 |      1.0001 |      1.0001 | \x3f800347 | f
 \x3f8020c4 |       1.001 |       1.001 | \x3f8020c5 | f
 \x3f8020c5 |       1.001 |       1.001 | \x3f8020c5 | t
 \x3f8020c6 |       1.001 |       1.001 | \x3f8020c5 | f
 \x3f8147ad |        1.01 |        1.01 | \x3f8147ae | f
 \x3f8147ae |        1.01 |        1.01 | \x3f8147ae | t
 \x3f8147af |        1.01 |        1.01 | \x3f8147ae | f
 \x3f8ccccc |         1.1 |         1.1 | \x3f8ccccd | f
 \x3f8ccccd |         1.1 |         1.1 | \x3f8ccccd | t
 \x3f8cccce |         1.1 |         1.1 | \x3f8ccccd | f
 \x3fc90fdb |      1.5708 |      1.5708 | \x3fc90ff9 | f
 \x402df854 |     2.71828 |     2.71828 | \x402df84d | f
 \x40490fdb |     3.14159 |     3.14159 | \x40490fd0 | f
 \x409fffff |           5 |           5 | \x40a00000 | f
 \x40a00000 |           5 |           5 | \x40a00000 | t
 \x40a00001 |           5 |           5 | \x40a00000 | f
 \x40afffff |         5.5 |         5.5 | \x40b00000 | f
 \x40b00000 |         5.5 |         5.5 | \x40b00000 | t
 \x40b00001 |         5.5 |         5.5 | \x40b00000 | f
 \x411fffff |          10 |          10 | \x41200000 | f
 \x41200000 |          10 |          10 | \x41200000 | t
 \x41200001 |          10 |          10 | \x41200000 | f
 \x42c7ffff |         100 |         100 | \x42c80000 | f
 \x42c80000 |         100 |         100 | \x42c80000 | t
 \x42c80001 |         100 |         100 | \x42c80000 | f
 \x4479ffff |        1000 |        1000 | \x447a0000 | f
 \x447a0000 |        1000 |        1000 | \x447a0000 | t
 \x447a0001 |        1000 |        1000 | \x447a0000 | f
 \x461c3fff |       10000 |       10000 | \x461c4000 | f
 \x461c4000 |       10000 |       10000 | \x461c4000 | t
 \x461c4001 |       10000 |       10000 | \x461c4000 | f
 \x47c34fff |      100000 |      100000 | \x47c35000 | f
 \x47c35000 |      100000 |      100000 | \x47c35000 | t
 \x47c35001 |      100000 |      100000 | \x47c35000 | f
 \x497423ff |       1e+06 |       1e+06 | \x49742400 | f
 \x49742400 |       1e+06 |       1e+06 | \x49742400 | t
 \x49742401 |       1e+06 |       1e+06 | \x49742400 | f
 \x4b18967f |       1e+07 |       1e+07 | \x4b189680 | f
 \x4b189680 |       1e+07 |       1e+07 | \x4b189680 | t
 \x4b189681 |       1e+07 |       1e+07 | \x4b189680 | f
 \x4cbebc1f |       1e+08 |       1e+08 | \x4cbebc20 | f
 \x4cbebc20 |       1e+08 |       1e+08 | \x4cbebc20 | t
 \x4cbebc21 |       1e+08 |       1e+08 | \x4cbebc20 | f
 \x4e6e6b27 |       1e+09 |       1e+09 | \x4e6e6b28 | f
 \x4e6e6b28 |       1e+09 |       1e+09 | \x4e6e6b28 | t
 \x4e6e6b29 |       1e+09 |       1e+09 | \x4e6e6b28 | f
 \x501502f8 |       1e+10 |       1e+10 | \x501502f9 | f
 \x501502f9 |       1e+10 |       1e+10 | \x501502f9 | t
 \x501502fa |       1e+10 |       1e+10 | \x501502f9 | f
 \x51ba43b6 |       1e+11 |       1e+11 | \x51ba43b7 | f
 \x51ba43b7 |       1e+11 |       1e+11 | \x51ba43b7 | t
 \x51ba43b8 |       1e+11 |       1e+11 | \x51ba43b7 | f
 \x1f6c1e4a |       5e-20 |       5e-20 | \x1f6c1e4a | t
 \x59be6cea |     6.7e+15 |     6.7e+15 | \x59be6cea | t
 \x5d5ab6c4 |    9.85e+17 |    9.85e+17 | \x5d5ab6c4 | t
 \x2cc4a9bd |  5.5895e-12 |  5.5895e-12 | \x2cc4a9bd | t
 \x15ae43fd | 7.03853e-26 | 7.03853e-26 | \x15ae43fc | f
 \x2cf757ca | 7.02991e-12 | 7.02991e-12 | \x2cf757cd | f
 \x665ba998 | 2.59332e+23 | 2.59332e+23 | \x665ba9aa | f
 \x743c3324 | 5.96429e+31 | 5.96429e+31 | \x743c3327 | f
 \x47f1205a |      123457 |      123457 | \x47f12080 | f
 \x4640e6ae |     12345.7 |     12345.7 | \x4640e6cd | f
 \x449a5225 |     1234.57 |     1234.57 | \x449a523d | f
 \x42f6e9d5 |     123.457 |     123.457 | \x42f6e9fc | f
 \x414587dd |     12.3457 |     12.3457 | \x414587fd | f
 \x3f9e064b |     1.23457 |     1.23457 | \x3f9e0664 | f
 \x4c000004 | 3.35544e+07 | 3.35544e+07 | \x4bfffff0 | f
 \x50061c46 |       9e+09 |       9e+09 | \x50061c46 | t
 \x510006a8 | 3.43667e+10 | 3.43667e+10 | \x510006a4 | f
 \x48951f84 |      305404 |      305404 | \x48951f80 | f
 \x45fd1840 |     8099.03 |     8099.03 | \x45fd183d | f
 \x39800000 | 0.000244141 | 0.000244141 | \x3980000d | f
 \x3b200000 |  0.00244141 |  0.00244141 | \x3b200010 | f
 \x3b900000 |  0.00439453 |  0.00439453 | \x3b8ffffd | f
 \x3bd00000 |  0.00634766 |  0.00634766 | \x3bd00008 | f
 \x63800000 | 4.72237e+21 | 4.72237e+21 | \x63800006 | f
 \x4b000000 | 8.38861e+06 | 8.38861e+06 | \x4b000002 | f
 \x4b800000 | 1.67772e+07 | 1.67772e+07 | \x4b7ffff0 | f
 \x4c000001 | 3.35544e+07 | 3.35544e+07 | \x4bfffff0 | f
 \x4c800b0d | 6.71315e+07 | 6.71315e+07 | \x4c800b0e | f
 \x00d24584 | 1.93104e-38 | 1.93104e-38 | \x00d2458a | f
 \x00d90b88 | 1.99324e-38 | 1.99324e-38 | \x00d90b6c | f
 \x45803f34 |      4103.9 |      4103.9 | \x45803f33 | f
 \x4f9f24f7 |    5.34e+09 |    5.34e+09 | \x4f9f24f8 | f
 \x3a8722c3 |    0.001031 |    0.001031 | \x3a87229f | f
 \x5c800041 | 2.88233e+17 | 2.88233e+17 | \x5c80004c | f
 \x15ae43fd | 7.03853e-26 | 7.03853e-26 | \x15ae43fc | f
 \x5d4cccfb |  9.2234e+17 |  9.2234e+17 | \x5d4cccf5 | f
 \x4c800001 | 6.71089e+07 | 6.71089e+07 | \x4c800004 | f
 \x57800ed8 | 2.81602e+14 | 2.81602e+14 | \x57800eca | f
 \x5f000000 | 9.22337e+18 | 9.22337e+18 | \x5efffffc | f
 \x700000f0 | 1.58461e+29 | 1.58461e+29 | \x700000f7 | f
 \x5f23e9ac | 1.18112e+19 | 1.18112e+19 | \x5f23e9d0 | f
 \x5e9502f9 | 5.36871e+18 | 5.36871e+18 | \x5e9502fb | f
 \x5e8012b1 | 4.61432e+18 | 4.61432e+18 | \x5e8012b7 | f
 \x3c000028 |  0.00781254 |  0.00781254 | \x3c00002b | f
 \x60cde861 | 1.18698e+20 | 1.18698e+20 | \x60cde880 | f
 \x03aa2a50 | 1.00014e-36 | 1.00014e-36 | \x03aa2a3e | f
 \x43480000 |         200 |         200 | \x43480000 | t
 \x4c000000 | 3.35544e+07 | 3.35544e+07 | \x4bfffff0 | f
 \x5d1502f9 | 6.71089e+17 | 6.71089e+17 | \x5d1502fe | f
 \x5d9502f9 | 1.34218e+18 | 1.34218e+18 | \x5d95030d | f
 \x5e1502f9 | 2.68435e+18 | 2.68435e+18 | \x5e1502e8 | f
 \x3f99999a |         1.2 |         1.2 | \x3f99999a | t
 \x3f9d70a4 |        1.23 |        1.23 | \x3f9d70a4 | t
 \x3f9df3b6 |       1.234 |       1.234 | \x3f9df3b6 | t
 \x3f9e0419 |      1.2345 |      1.2345 | \x3f9e0419 | t
 \x3f9e0610 |     1.23456 |     1.23456 | \x3f9e0610 | t
 \x3f9e064b |     1.23457 |     1.23457 | \x3f9e0664 | f
 \x3f9e0651 |     1.23457 |     1.23457 | \x3f9e0664 | f
 \x03d20cfe | 1.23457e-36 | 1.23457e-36 | \x03d20d1b | f
(261 rows)

rollback;
-- clean up, lest opr_sanity complain
--Testcase 182:
drop type xfloat4 cascade;
NOTICE:  drop cascades to 6 other objects
DETAIL:  drop cascades to function xfloat4in(cstring)
drop cascades to function xfloat4out(xfloat4)
drop cascades to cast from xfloat4 to real
drop cascades to cast from real to xfloat4
drop cascades to cast from xfloat4 to integer
drop cascades to cast from integer to xfloat4
-- Clean up
DO $d$
declare
  l_rec record;
begin
  for l_rec in (select foreign_table_schema, foreign_table_name 
                from information_schema.foreign_tables) loop
     execute format('drop foreign table %I.%I cascade;', l_rec.foreign_table_schema, l_rec.foreign_table_name);
  end loop;
end;
$d$;
--Testcase 183:
DROP SERVER sqlite_svr;
--Testcase 184:
DROP EXTENSION sqlite_fdw CASCADE;
