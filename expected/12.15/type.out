--SET log_min_messages  TO DEBUG1;
--SET client_min_messages  TO DEBUG1;
--Testcase 44:
CREATE EXTENSION sqlite_fdw;
--Testcase 45:
CREATE SERVER sqlite_svr FOREIGN DATA WRAPPER sqlite_fdw
OPTIONS (database '/tmp/sqlitefdw_test.db');
--Testcase 46:
CREATE SERVER sqlite2 FOREIGN DATA WRAPPER sqlite_fdw;
IMPORT FOREIGN SCHEMA public FROM SERVER sqlite_svr INTO public;
--Testcase 1:
INSERT INTO "type_STRING"(col) VALUES ('string');
--Testcase 2:
INSERT INTO "type_BOOLEAN"(col) VALUES (TRUE);
--Testcase 3:
INSERT INTO "type_BOOLEAN"(col) VALUES (FALSE);
--Testcase 4:
INSERT INTO "type_BYTE"(col) VALUES ('c');
--Testcase 5:
INSERT INTO "type_SINT"(col) VALUES (32767);
--Testcase 6:
INSERT INTO "type_SINT"(col) VALUES (-32768);
--Testcase 7:
INSERT INTO "type_BINT"(col) VALUES (9223372036854775807);
--Testcase 8:
INSERT INTO "type_BINT"(col) VALUES (-9223372036854775808);
--Testcase 9:
INSERT INTO "type_INTEGER"(col) VALUES (9223372036854775807);
--Testcase 10:
INSERT INTO "type_FLOAT"(col) VALUES (3.1415);
--Testcase 11:
INSERT INTO "type_DOUBLE"(col) VALUES (3.14159265);
--Testcase 12:
INSERT INTO "type_TIMESTAMP" VALUES ('2017.11.06 12:34:56.789', '2017.11.06');
--Testcase 13:
INSERT INTO "type_TIMESTAMP" VALUES ('2017.11.06 1:3:0', '2017.11.07');
--Testcase 14:
INSERT INTO "type_BLOB"(col) VALUES (bytea('\xDEADBEEF'));
--Testcase 15:
INSERT INTO typetest VALUES(1,'a', 'b', 'c','2017.11.06 12:34:56.789', '2017.11.06 12:34:56.789' ) ;
--Testcase 16:
SELECT * FROM "type_STRING";
  col   
--------
 string
(1 row)

--Testcase 17:
SELECT * FROM "type_BOOLEAN";
 col 
-----
 t
 f
(2 rows)

--Testcase 18:
SELECT * FROM "type_BYTE";
 col 
-----
 c
(1 row)

--Testcase 19:
SELECT * FROM "type_SINT";
  col   
--------
  32767
 -32768
(2 rows)

--Testcase 20:
SELECT * FROM "type_BINT";
         col          
----------------------
  9223372036854775807
 -9223372036854775808
(2 rows)

--Testcase 21:
SELECT * FROM "type_INTEGER";
         col         
---------------------
 9223372036854775807
(1 row)

--Testcase 22:
SELECT * FROM "type_FLOAT";
  col   
--------
 3.1415
(1 row)

--Testcase 23:
SELECT * FROM "type_DOUBLE";
    col     
------------
 3.14159265
(1 row)

set datestyle=ISO;
--Testcase 24:
SELECT * FROM "type_TIMESTAMP";
           col           |          b          
-------------------------+---------------------
 2017-11-06 12:34:56.789 | 2017-11-06 00:00:00
 2017-11-06 01:03:00     | 2017-11-07 00:00:00
(2 rows)

--Testcase 25:
SELECT * FROM "type_BLOB";
    col     
------------
 \xdeadbeef
(1 row)

--Testcase 26:
SELECT * FROM typetest;
 i | v |     c      | t |            d            |           ti            
---+---+------------+---+-------------------------+-------------------------
 1 | a | b          | c | 2017-11-06 12:34:56.789 | 2017-11-06 12:34:56.789
(1 row)

--Testcase 27:
insert into "type_STRING" values('TYPE');
--Testcase 28:
insert into "type_STRING" values('type');
-- not pushdown
--Testcase 29:
SELECT  *FROM "type_STRING" WHERE col like 'TYP%';
 col  
------
 TYPE
(1 row)

--Testcase 30:
EXPLAIN SELECT  *FROM "type_STRING" WHERE col like 'TYP%';
                            QUERY PLAN                             
-------------------------------------------------------------------
 Foreign Scan on "type_STRING"  (cost=10.00..7.00 rows=7 width=32)
(1 row)

-- pushdown
--Testcase 31:
SELECT  *FROM "type_STRING" WHERE col ilike 'typ%';
 col  
------
 TYPE
 type
(2 rows)

--Testcase 32:
EXPLAIN SELECT  *FROM "type_STRING" WHERE col ilike 'typ%';
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan on "type_STRING"  (cost=10.00..58.00 rows=58 width=32)
   Filter: (col ~~* 'typ%'::text)
(2 rows)

--Testcase 33:
SELECT  *FROM "type_STRING" WHERE col ilike 'typ%' and col like 'TYPE';
 col  
------
 TYPE
(1 row)

--Testcase 34:
EXPLAIN SELECT  *FROM "type_STRING" WHERE col ilike 'typ%' and col like 'TYPE';
                            QUERY PLAN                             
-------------------------------------------------------------------
 Foreign Scan on "type_STRING"  (cost=10.00..1.00 rows=1 width=32)
   Filter: (col ~~* 'typ%'::text)
(2 rows)

--Testcase 35:
SELECT * FROM "type_TIMESTAMP";
           col           |          b          
-------------------------+---------------------
 2017-11-06 12:34:56.789 | 2017-11-06 00:00:00
 2017-11-06 01:03:00     | 2017-11-07 00:00:00
(2 rows)

--Testcase 36:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM  "type_TIMESTAMP" WHERE col > date ('2017.11.06 12:34:56.789') ;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public."type_TIMESTAMP"
   Output: col, b
   SQLite query: SELECT `col`, `b` FROM main."type_TIMESTAMP" WHERE ((`col` > '2017-11-06'))
(3 rows)

--Testcase 37:
SELECT * FROM  "type_TIMESTAMP" WHERE col > date ('2017.11.06 12:34:56.789') ;
           col           |          b          
-------------------------+---------------------
 2017-11-06 01:03:00     | 2017-11-07 00:00:00
 2017-11-06 12:34:56.789 | 2017-11-06 00:00:00
(2 rows)

--Testcase 38:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM  "type_TIMESTAMP" WHERE col::text > date ('2017.11.06 12:34:56.789')::text ;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public."type_TIMESTAMP"
   Output: col, b
   Filter: (("type_TIMESTAMP".col)::text > ('2017-11-06'::date)::text)
   SQLite query: SELECT `col`, `b` FROM main."type_TIMESTAMP"
(4 rows)

--Testcase 39:
SELECT * FROM  "type_TIMESTAMP" WHERE col::text > date ('2017.11.06 12:34:56.789')::text ;
           col           |          b          
-------------------------+---------------------
 2017-11-06 12:34:56.789 | 2017-11-06 00:00:00
 2017-11-06 01:03:00     | 2017-11-07 00:00:00
(2 rows)

--Testcase 40:
EXPLAIN  (VERBOSE, COSTS OFF) SELECT * FROM  "type_TIMESTAMP" WHERE col > b - interval '1 hour'; 
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public."type_TIMESTAMP"
   Output: col, b
   Filter: ("type_TIMESTAMP".col > ("type_TIMESTAMP".b - '@ 1 hour'::interval))
   SQLite query: SELECT `col`, `b` FROM main."type_TIMESTAMP"
(4 rows)

--Testcase 41:
SELECT * FROM  "type_TIMESTAMP" WHERE col > b - interval '1 hour';
           col           |          b          
-------------------------+---------------------
 2017-11-06 12:34:56.789 | 2017-11-06 00:00:00
(1 row)

--Testcase 42:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM  "type_TIMESTAMP" WHERE col > b;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Foreign Scan on public."type_TIMESTAMP"
   Output: col, b
   SQLite query: SELECT `col`, `b` FROM main."type_TIMESTAMP" WHERE ((`col` > `b`))
(3 rows)

--Testcase 43:
SELECT * FROM  "type_TIMESTAMP" WHERE col > b;
           col           |          b          
-------------------------+---------------------
 2017-11-06 12:34:56.789 | 2017-11-06 00:00:00
(1 row)

--Testcase 48:
INSERT INTO "type_DATE"(col) VALUES ('2021.02.23');
--Testcase 49:
INSERT INTO "type_DATE"(col) VALUES ('2021/03/08');
--Testcase 50:
INSERT INTO "type_DATE"(col) VALUES ('9999-12-30');
--Testcase 58:
SELECT * FROM "type_DATE";
    col     
------------
 2021-02-23
 2021-03-08
 9999-12-30
(3 rows)

--Testcase 51:
INSERT INTO "type_TIME"(col) VALUES ('01:23:45');
--Testcase 52:
INSERT INTO "type_TIME"(col) VALUES ('01:23:45.6789');
--Testcase 59:
SELECT * FROM "type_TIME";
      col      
---------------
 01:23:45
 01:23:45.6789
(2 rows)

--Testcase 60:
EXPLAIN VERBOSE
SELECT c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c17, c18, c19, c2, c21, c22, c23, c24 FROM alltypetest;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.alltypetest  (cost=10.00..57.00 rows=57 width=1400)
   Output: c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c17, c18, c19, c2, c21, c22, c23, c24
   SQLite query: SELECT `c1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8`, `c9`, `c10`, `c11`, `c12`, `c13`, `c14`, `c15`, `c17`, `c18`, `c19`, `c21`, `c22`, `c23`, `c24` FROM main."alltypetest"
(3 rows)

--Testcase 61:
SELECT c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15,  c17, c18, c19, c2, c21, c22, c23, c24 FROM alltypetest;
   c1   | c2  |  c3   |   c4   |      c5       |      c6      |      c7       |     c8     |          c9          |          c10           |         c11         |       c12        |                    c13                    |             c14             |           c15            |   c17   |     c18      |     c19     | c2  | c21  |     c22     |    c23     |         c24         
--------+-----+-------+--------+---------------+--------------+---------------+------------+----------------------+------------------------+---------------------+------------------+-------------------------------------------+-----------------------------+--------------------------+---------+--------------+-------------+-----+------+-------------+------------+---------------------
 583647 | 127 | 12767 | 388607 | 2036854775807 | 573709551615 | 2036854775807 | abcdefghij | abcdefghijjhgfjfuafh | Côte dIvoire Fijifoxju | Hôm nay tôi rất vui | I am happy today | 今日はとても幸せです 今日はとても幸せです | The quick brown fox jumps o | ABCDEFGHIJKLMNOPQRSTUVWX | 3.4e+18 | 1.79769e+108 | 1.79769e+88 | 127 | 1234 | 99999.99999 | 9999-12-31 | 9999-12-31 23:59:59
(1 row)

--Testcase 53:
CREATE FOREIGN TABLE type_JSON(col JSON OPTIONS (key 'true')) SERVER sqlite_svr OPTIONS (table 'type_TEXT');
--Testcase 54:
INSERT INTO type_JSON(col) VALUES ('[1, 2, "foo", null]');
--Testcase 55:
INSERT INTO type_JSON(col) VALUES ('{"bar": "baz", "balance": 7.77, "active": false}'::json);
--Testcase 56
SELECT * FROM type_JSON;
                       col                        
--------------------------------------------------
 [1, 2, "foo", null]
 {"bar": "baz", "balance": 7.77, "active": false}
(2 rows)

--Testcase 57
DELETE FROM type_JSON;
-- drop column
--Testcase 62:
DROP FOREIGN TABLE "type_BOOLEAN";
--Testcase 63:
CREATE FOREIGN TABLE "type_BOOLEAN" (colx int, col boolean) SERVER sqlite_svr;
--Testcase 64:
ALTER FOREIGN TABLE "type_BOOLEAN" DROP COLUMN colx;
--Testcase 65:
SELECT * FROM "type_BOOLEAN"; -- OK
 col 
-----
 t
 f
(2 rows)

-- define INTEGER as TEXT column
--Testcase 67:
ALTER FOREIGN TABLE "type_INTEGER" ALTER COLUMN col TYPE text;
--Testcase 68:
SELECT * FROM "type_INTEGER"; -- OK
         col         
---------------------
 9223372036854775807
(1 row)

-- define INTEGER as bpchar
--Testcase 69:
ALTER FOREIGN TABLE "type_INTEGER" ALTER COLUMN col TYPE char(30);
--Testcase 70:
SELECT * FROM "type_INTEGER"; -- OK
              col               
--------------------------------
 9223372036854775807           
(1 row)

-- define INTEGER as varchar
--Testcase 71:
ALTER FOREIGN TABLE "type_INTEGER" ALTER COLUMN col TYPE varchar(30);
--Testcase 72:
SELECT * FROM "type_INTEGER"; -- OK
         col         
---------------------
 9223372036854775807
(1 row)

-- define INTEGER as name
--Testcase 73:
ALTER FOREIGN TABLE "type_INTEGER" ALTER COLUMN col TYPE name;
--Testcase 74:
SELECT * FROM "type_INTEGER"; -- OK
         col         
---------------------
 9223372036854775807
(1 row)

-- define INTEGER as json
--Testcase 75:
ALTER FOREIGN TABLE "type_INTEGER" ALTER COLUMN col TYPE json;
--Testcase 76:
SELECT * FROM "type_INTEGER"; -- OK
         col         
---------------------
 9223372036854775807
(1 row)

-- define INTEGER as time
--Testcase 77:
DELETE FROM "type_INTEGER";
--Testcase 78:
ALTER FOREIGN TABLE "type_INTEGER" ALTER COLUMN col TYPE int;
--Testcase 79:
INSERT INTO "type_INTEGER" VALUES (120506);
--Testcase 80:
ALTER FOREIGN TABLE "type_INTEGER" ALTER COLUMN col TYPE time;
--Testcase 81:
SELECT * FROM "type_INTEGER"; -- OK
   col    
----------
 12:05:06
(1 row)

-- define INTEGER as date
--Testcase 82:
ALTER FOREIGN TABLE "type_INTEGER" ALTER COLUMN col TYPE date;
--Testcase 83:
SELECT * FROM "type_INTEGER"; -- OK
    col     
------------
 2012-05-06
(1 row)

--Testcase 84:
ALTER FOREIGN TABLE "type_INTEGER" ALTER COLUMN col TYPE int;
--Testcase 85:
INSERT INTO "type_DOUBLE" VALUES (1.3e-5);
--Testcase 86:
SELECT * FROM "type_DOUBLE";
    col     
------------
 3.14159265
    1.3e-05
(2 rows)

-- define DOUBLE as TEXT column
--Testcase 87:
ALTER FOREIGN TABLE "type_DOUBLE" ALTER COLUMN col TYPE text;
--Testcase 88:
SELECT * FROM "type_DOUBLE"; -- OK
    col     
------------
 3.14159265
 1.3e-05
(2 rows)

-- define DOUBLE as bpchar
--Testcase 89:
ALTER FOREIGN TABLE "type_DOUBLE" ALTER COLUMN col TYPE char(30);
--Testcase 90:
SELECT * FROM "type_DOUBLE"; -- OK
              col               
--------------------------------
 3.14159265                    
 1.3e-05                       
(2 rows)

-- define DOUBLE as varchar
--Testcase 91:
ALTER FOREIGN TABLE "type_DOUBLE" ALTER COLUMN col TYPE varchar(30);
--Testcase 92:
SELECT * FROM "type_DOUBLE"; -- OK
    col     
------------
 3.14159265
 1.3e-05
(2 rows)

-- define DOUBLE as name
--Testcase 93:
ALTER FOREIGN TABLE "type_DOUBLE" ALTER COLUMN col TYPE name;
--Testcase 94:
SELECT * FROM "type_DOUBLE"; -- OK
    col     
------------
 3.14159265
 1.3e-05
(2 rows)

-- define DOUBLE as json
--Testcase 95:
ALTER FOREIGN TABLE "type_DOUBLE" ALTER COLUMN col TYPE json;
--Testcase 96:
SELECT * FROM "type_DOUBLE"; -- OK
    col     
------------
 3.14159265
 1.3e-05
(2 rows)

--Testcase 97:
DELETE FROM "type_DOUBLE";
--Testcase 98:
ALTER FOREIGN TABLE "type_DOUBLE" ALTER COLUMN col TYPE float8;
--Testcase 99:
INSERT INTO "type_DOUBLE" VALUES (120506.12);
-- define DOUBLE as time
--Testcase 100:
ALTER FOREIGN TABLE "type_DOUBLE" ALTER COLUMN col TYPE time;
--Testcase 101:
SELECT * FROM "type_DOUBLE"; -- OK
     col     
-------------
 12:05:06.12
(1 row)

--Testcase 102:
DELETE FROM "type_DOUBLE";
--Testcase 103:
ALTER FOREIGN TABLE "type_DOUBLE" ALTER COLUMN col TYPE float8;
--Testcase 104:
INSERT INTO "type_DOUBLE" VALUES (1999.012);
-- define DOUBLE as date
--Testcase 105:
ALTER FOREIGN TABLE "type_DOUBLE" ALTER COLUMN col TYPE date;
--Testcase 106:
SELECT * FROM "type_DOUBLE"; -- OK
    col     
------------
 1999-01-12
(1 row)

--Testcase 107:
ALTER FOREIGN TABLE "type_DOUBLE" ALTER COLUMN col TYPE float8;
--Testcase 108:
DROP FOREIGN TABLE "type_UUID";
--Testcase 109:
CREATE FOREIGN TABLE "type_UUID"( "i" int OPTIONS (key 'true'), "u" uuid) SERVER sqlite_svr OPTIONS (table 'type_UUID');
--Testcase 110:
ALTER FOREIGN TABLE "type_UUID" ALTER COLUMN "u" TYPE text;
--Testcase 111:
INSERT INTO "type_UUID" ("i", "u") VALUES (1, 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11');
--Testcase 112:
INSERT INTO "type_UUID" ("i", "u") VALUES (2, 'A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11');
--Testcase 113:
INSERT INTO "type_UUID" ("i", "u") VALUES (3, '{a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11}');
--Testcase 114:
INSERT INTO "type_UUID" ("i", "u") VALUES (4, 'a0eebc999c0b4ef8bb6d6bb9bd380a11');
--Testcase 115:
INSERT INTO "type_UUID" ("i", "u") VALUES (5, 'a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11');
--Testcase 116:
INSERT INTO "type_UUID" ("i", "u") VALUES (6, '{a0eebc99-9c0b4ef8-bb6d6bb9-bd380a11}');
--Testcase 117:
INSERT INTO "type_UUID" ("i", "u") VALUES (7, 'b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12');
--Testcase 118:
INSERT INTO "type_UUID" ("i", "u") VALUES (8, 'B0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A12');
--Testcase 119:
INSERT INTO "type_UUID" ("i", "u") VALUES (9, '{b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12}');
--Testcase 120:
INSERT INTO "type_UUID" ("i", "u") VALUES (10, '{b0eebc99-9c0b4ef8-bb6d6bb9-bd380a12}');
--Testcase 121:
INSERT INTO "type_UUID" ("i", "u") VALUES (11, 'b0eebc999c0b4ef8bb6d6bb9bd380a12');
--Testcase 122:
INSERT INTO "type_UUID" ("i", "u") VALUES (12, 'b0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a12');
--Testcase 123:
ALTER FOREIGN TABLE "type_UUID" ALTER COLUMN "u" TYPE bytea;
--Testcase 124:
INSERT INTO "type_UUID" ("i", "u") VALUES (13, decode('a0eebc999c0b4ef8bb6d6bb9bd380a11', 'hex'));
--Testcase 125:
INSERT INTO "type_UUID" ("i", "u") VALUES (14, decode('b0eebc999c0b4ef8bb6d6bb9bd380a12', 'hex'));
--Testcase 126:
INSERT INTO "type_UUID" ("i", "u") VALUES (15, decode('a0eebc999c0b4ef8bb6d6bb9bd380a11', 'hex'));
--Testcase 127:
INSERT INTO "type_UUID" ("i", "u") VALUES (16, decode('b0eebc999c0b4ef8bb6d6bb9bd380a12', 'hex'));
--Testcase 128:
ALTER FOREIGN TABLE "type_UUID" ALTER COLUMN "u" TYPE uuid;
--Testcase 129:
INSERT INTO "type_UUID" ("i", "u") VALUES (17, 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11');
--Testcase 130:
INSERT INTO "type_UUID" ("i", "u") VALUES (18, 'A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11');
--Testcase 131:
INSERT INTO "type_UUID" ("i", "u") VALUES (19, '{a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11}');
--Testcase 132:
INSERT INTO "type_UUID" ("i", "u") VALUES (20, 'a0eebc999c0b4ef8bb6d6bb9bd380a11');
--Testcase 133:
INSERT INTO "type_UUID" ("i", "u") VALUES (21, 'a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11');
--Testcase 134:
INSERT INTO "type_UUID" ("i", "u") VALUES (22, '{a0eebc99-9c0b4ef8-bb6d6bb9-bd380a11}');
--Testcase 135:
INSERT INTO "type_UUID" ("i", "u") VALUES (23, 'b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12');
--Testcase 136:
INSERT INTO "type_UUID" ("i", "u") VALUES (24, 'B0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A12');
--Testcase 137:
INSERT INTO "type_UUID" ("i", "u") VALUES (25, '{b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12}');
--Testcase 138:
INSERT INTO "type_UUID" ("i", "u") VALUES (26, 'b0eebc999c0b4ef8bb6d6bb9bd380a12');
--Testcase 139:
INSERT INTO "type_UUID" ("i", "u") VALUES (27, 'b0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a12');
--Testcase 140:
INSERT INTO "type_UUID" ("i", "u") VALUES (28, '{b0eebc99-9c0b4ef8-bb6d6bb9-bd380a12}');
--Testcase 141:
EXPLAIN VERBOSE
INSERT INTO "type_UUID" ("i", "u") VALUES (28, '{b0eebc99-9c0b4ef8-bb6d6bb9-bd380a12}');
                            QUERY PLAN                            
------------------------------------------------------------------
 Insert on public."type_UUID"  (cost=0.00..0.01 rows=1 width=20)
   ->  Result  (cost=0.00..0.01 rows=1 width=20)
         Output: 28, 'b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12'::uuid
(3 rows)

--Testcase 142:
ALTER FOREIGN TABLE "type_UUID" ALTER COLUMN "u" OPTIONS (ADD column_type 'BLOB');
--Testcase 143:
INSERT INTO "type_UUID" ("i", "u") VALUES (29, 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11');
--Testcase 144:
INSERT INTO "type_UUID" ("i", "u") VALUES (30, 'A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11');
--Testcase 145:
INSERT INTO "type_UUID" ("i", "u") VALUES (31, '{a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11}');
--Testcase 146:
INSERT INTO "type_UUID" ("i", "u") VALUES (32, 'a0eebc999c0b4ef8bb6d6bb9bd380a11');
--Testcase 147:
INSERT INTO "type_UUID" ("i", "u") VALUES (33, 'a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11');
--Testcase 148:
INSERT INTO "type_UUID" ("i", "u") VALUES (34, '{a0eebc99-9c0b4ef8-bb6d6bb9-bd380a11}');
--Testcase 149:
INSERT INTO "type_UUID" ("i", "u") VALUES (35, 'b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12');
--Testcase 150:
INSERT INTO "type_UUID" ("i", "u") VALUES (36, 'B0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A12');
--Testcase 151:
INSERT INTO "type_UUID" ("i", "u") VALUES (37, '{b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12}');
--Testcase 152:
INSERT INTO "type_UUID" ("i", "u") VALUES (38, 'b0eebc999c0b4ef8bb6d6bb9bd380a12');
--Testcase 153:
INSERT INTO "type_UUID" ("i", "u") VALUES (39, 'b0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a12');
--Testcase 154:
INSERT INTO "type_UUID" ("i", "u") VALUES (40, '{b0eebc99-9c0b4ef8-bb6d6bb9-bd380a12}');
--Testcase 155:
EXPLAIN VERBOSE
INSERT INTO "type_UUID" ("i", "u") VALUES (39, 'b0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a12');
                            QUERY PLAN                            
------------------------------------------------------------------
 Insert on public."type_UUID"  (cost=0.00..0.01 rows=1 width=20)
   ->  Result  (cost=0.00..0.01 rows=1 width=20)
         Output: 39, 'b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12'::uuid
(3 rows)

--Testcase 156:
CREATE FOREIGN TABLE "type_UUID+"( "i" int OPTIONS (key 'true'), "u" uuid, "t" text, "l" smallint) SERVER sqlite_svr OPTIONS (table 'type_UUID+');
--Testcase 157:
SELECT * FROM "type_UUID+";
 i  |                  u                   |  t   | l  
----+--------------------------------------+------+----
  1 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
  2 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
  3 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 38
  4 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 32
  5 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 39
  6 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 37
  7 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
  8 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
  9 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 38
 10 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 37
 11 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 32
 12 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 39
 13 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | blob | 16
 14 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | blob | 16
 15 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | blob | 16
 16 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | blob | 16
 17 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 18 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 19 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 20 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 21 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 22 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 23 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 24 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 25 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 26 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 27 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 28 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 29 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 30 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 31 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 32 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 33 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 34 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 35 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 36 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 37 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 38 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 39 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 40 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
(40 rows)

--Testcase 158:
ALTER FOREIGN TABLE "type_UUID" ALTER COLUMN "u" OPTIONS (SET column_type 'BLOB');
--Testcase 159:
SELECT * FROM "type_UUID+" where "u" = 'A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11';
 i  |                  u                   |  t   | l  
----+--------------------------------------+------+----
  1 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
  2 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
  3 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 38
  4 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 32
  5 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 39
  6 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 37
 13 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | blob | 16
 15 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | blob | 16
 17 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 18 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 19 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 20 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 21 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 22 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 29 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 30 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 31 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 32 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 33 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 34 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
(20 rows)

--Testcase 160:
EXPLAIN VERBOSE
SELECT * FROM "type_UUID+" where "u" = 'A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11';
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public."type_UUID+"  (cost=10.00..5.00 rows=5 width=54)
   Output: i, u, t, l
   SQLite query: SELECT `i`, coalesce(sqlite_fdw_uuid_blob(`u`),`u`), `t`, `l` FROM main."type_UUID+" WHERE ((coalesce(sqlite_fdw_uuid_blob(`u`),`u`) = X'a0eebc999c0b4ef8bb6d6bb9bd380a11'))
(3 rows)

--Testcase 161:
ALTER FOREIGN TABLE "type_UUID" ALTER COLUMN "u" OPTIONS (SET column_type 'TEXT');
--Testcase 162:
SELECT * FROM "type_UUID+" where "u" = 'A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11';
 i  |                  u                   |  t   | l  
----+--------------------------------------+------+----
  1 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
  2 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
  3 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 38
  4 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 32
  5 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 39
  6 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 37
 13 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | blob | 16
 15 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | blob | 16
 17 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 18 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 19 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 20 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 21 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 22 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 29 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 30 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 31 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 32 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 33 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 34 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
(20 rows)

--Testcase 163:
EXPLAIN VERBOSE
SELECT * FROM "type_UUID+" where "u" = 'A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11';
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public."type_UUID+"  (cost=10.00..5.00 rows=5 width=54)
   Output: i, u, t, l
   SQLite query: SELECT `i`, coalesce(sqlite_fdw_uuid_blob(`u`),`u`), `t`, `l` FROM main."type_UUID+" WHERE ((coalesce(sqlite_fdw_uuid_blob(`u`),`u`) = X'a0eebc999c0b4ef8bb6d6bb9bd380a11'))
(3 rows)

--Testcase 164:
SELECT * FROM "type_UUID+" where "u" = 'B0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A12';
 i  |                  u                   |  t   | l  
----+--------------------------------------+------+----
  7 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
  8 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
  9 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 38
 10 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 37
 11 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 32
 12 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 39
 14 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | blob | 16
 16 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | blob | 16
 23 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 24 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 25 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 26 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 27 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 28 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 35 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 36 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 37 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 38 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 39 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 40 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
(20 rows)

--Testcase 165:
ALTER FOREIGN TABLE "type_UUID" ALTER COLUMN "u" OPTIONS (SET column_type 'BLOB');
--Testcase 166:
SELECT * FROM "type_UUID+" where "u" = 'B0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A12';
 i  |                  u                   |  t   | l  
----+--------------------------------------+------+----
  7 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
  8 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
  9 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 38
 10 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 37
 11 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 32
 12 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 39
 14 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | blob | 16
 16 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | blob | 16
 23 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 24 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 25 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 26 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 27 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 28 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 35 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 36 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 37 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 38 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 39 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
 40 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12 | text | 36
(20 rows)

--Testcase 167:
UPDATE "type_UUID" SET "u" = '{b0eebc99-9c0b4ef8-bb6d6bb9-bd380a15}' WHERE "i" = 25;
--Testcase 168:
EXPLAIN VERBOSE
UPDATE "type_UUID" SET "u" = '{b0eebc99-9c0b4ef8-bb6d6bb9-bd380a15}' WHERE "i" = 25;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Update on public."type_UUID"  (cost=10.00..15.00 rows=15 width=24)
   ->  Foreign Update on public."type_UUID"  (cost=10.00..15.00 rows=15 width=24)
         SQLite query: UPDATE main."type_UUID" SET `u` = X'b0eebc999c0b4ef8bb6d6bb9bd380a15' WHERE ((`i` = 25))
(3 rows)

--Testcase 169:
ALTER FOREIGN TABLE "type_UUID" ALTER COLUMN "u" OPTIONS (SET column_type 'TEXT');
--Testcase 170:
EXPLAIN VERBOSE
UPDATE "type_UUID" SET "u" = '{b0eebc99-9c0b4ef8-bb6d6bb9-bd380a15}' WHERE "i" = 25;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Update on public."type_UUID"  (cost=10.00..15.00 rows=15 width=24)
   ->  Foreign Update on public."type_UUID"  (cost=10.00..15.00 rows=15 width=24)
         SQLite query: UPDATE main."type_UUID" SET `u` = X'b0eebc999c0b4ef8bb6d6bb9bd380a15' WHERE ((`i` = 25))
(3 rows)

--Testcase 171:
ALTER FOREIGN TABLE "type_UUID" ALTER COLUMN "u" OPTIONS (SET column_type 'BLOB');
--Testcase 172:
DELETE FROM "type_UUID" WHERE "u" = 'b0eebc999c0b4ef8bb6d6bb9bd380a12';
--Testcase 173:
EXPLAIN VERBOSE
DELETE FROM "type_UUID" WHERE "u" = 'b0eebc999c0b4ef8bb6d6bb9bd380a12';
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Delete on public."type_UUID"  (cost=10.00..15.00 rows=15 width=4)
   ->  Foreign Delete on public."type_UUID"  (cost=10.00..15.00 rows=15 width=4)
         SQLite query: DELETE FROM main."type_UUID" WHERE ((coalesce(sqlite_fdw_uuid_blob(`u`),`u`) = X'b0eebc999c0b4ef8bb6d6bb9bd380a12'))
(3 rows)

--Testcase 174:
SELECT * FROM "type_UUID+";
 i  |                  u                   |  t   | l  
----+--------------------------------------+------+----
  1 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
  2 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
  3 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 38
  4 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 32
  5 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 39
  6 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 37
 13 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | blob | 16
 15 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | blob | 16
 17 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 18 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 19 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 20 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 21 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 22 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 25 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a15 | blob | 16
 29 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 30 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 31 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 32 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 33 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
 34 | a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11 | text | 36
(21 rows)

--Testcase 175:
DELETE FROM "type_UUID" WHERE "u" = 'a0eebc99-9c0b4ef8-bb6d6bb9-bd380a11';
--Testcase 176:
SELECT * FROM "type_UUID+";
 i  |                  u                   |  t   | l  
----+--------------------------------------+------+----
 25 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a15 | blob | 16
(1 row)

--Testcase 177:
ALTER FOREIGN TABLE "type_UUID" ALTER COLUMN "u" OPTIONS (SET column_type 'TEXT');
--Testcase 175:
DELETE FROM "type_UUID" WHERE "u" = 'b0eebc999c0b4ef8bb6d6bb9bd380a15';
--Testcase 176:
EXPLAIN VERBOSE
DELETE FROM "type_UUID" WHERE "u" = 'b0eebc999c0b4ef8bb6d6bb9bd380a15';
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Delete on public."type_UUID"  (cost=10.00..15.00 rows=15 width=4)
   ->  Foreign Delete on public."type_UUID"  (cost=10.00..15.00 rows=15 width=4)
         SQLite query: DELETE FROM main."type_UUID" WHERE ((coalesce(sqlite_fdw_uuid_blob(`u`),`u`) = X'b0eebc999c0b4ef8bb6d6bb9bd380a15'))
(3 rows)

--Testcase 177:
SELECT * FROM "type_UUID+";
 i | u | t | l 
---+---+---+---
(0 rows)

--Testcase 178:
INSERT INTO "type_UUID" ("i", "u") VALUES (41, '{b0eebc99-9c0b4ef8-bb6d6bb9-bd380a15}');
--Testcase 179:
SELECT * FROM "type_UUID+" WHERE "i" = 41;
 i  |                  u                   |  t   | l  
----+--------------------------------------+------+----
 41 | b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a15 | text | 36
(1 row)

--Testcase 180:
UPDATE "type_UUID" SET "u" = '{b0eebc99-9c0b4ef8-bb6d6bb9-00000a15}' WHERE "u" = '{b0eebc99-9c0b4ef8-bb6d6bb9-bd380a15}';
--Testcase 181:
EXPLAIN VERBOSE
UPDATE "type_UUID" SET "u" = '{b0eebc99-9c0b4ef8-bb6d6bb9-00000a15}' WHERE "u" = '{b0eebc99-9c0b4ef8-bb6d6bb9-bd380a15}';
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Update on public."type_UUID"  (cost=10.00..15.00 rows=15 width=24)
   ->  Foreign Update on public."type_UUID"  (cost=10.00..15.00 rows=15 width=24)
         SQLite query: UPDATE main."type_UUID" SET `u` = X'b0eebc999c0b4ef8bb6d6bb900000a15' WHERE ((coalesce(sqlite_fdw_uuid_blob(`u`),`u`) = X'b0eebc999c0b4ef8bb6d6bb9bd380a15'))
(3 rows)

--Testcase 182:
SELECT * FROM "type_UUID+";
 i  |                  u                   |  t   | l  
----+--------------------------------------+------+----
 41 | b0eebc99-9c0b-4ef8-bb6d-6bb900000a15 | blob | 16
(1 row)

--Testcase 183:
ALTER FOREIGN TABLE "type_UUID" ALTER COLUMN "u" OPTIONS (SET column_type 'BLOB');
--Testcase 184:
EXPLAIN VERBOSE
UPDATE "type_UUID" SET "u" = '{b0eebc99-9c0b4ef8-bb6d6bb9-bd380a15}' WHERE "u" = '{b0eebc99-9c0b4ef8-bb6d6bb9-00000a15}';
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Update on public."type_UUID"  (cost=10.00..15.00 rows=15 width=24)
   ->  Foreign Update on public."type_UUID"  (cost=10.00..15.00 rows=15 width=24)
         SQLite query: UPDATE main."type_UUID" SET `u` = X'b0eebc999c0b4ef8bb6d6bb9bd380a15' WHERE ((coalesce(sqlite_fdw_uuid_blob(`u`),`u`) = X'b0eebc999c0b4ef8bb6d6bb900000a15'))
(3 rows)

--Testcase 185:
ALTER FOREIGN TABLE "type_UUID" ALTER COLUMN "u" TYPE bytea;
--Testcase 186:
INSERT INTO "type_UUID" ("i", "u") VALUES (42, decode('a0eebc999c0b4ef8bb6d6bb9bd380a11f1', 'hex'));
--Testcase 187:
INSERT INTO "type_UUID" ("i", "u") VALUES (43, decode('b0eebc999c0b4ef8bb6d6bb9bd380a', 'hex'));
--Testcase 188:
ALTER FOREIGN TABLE "type_UUID" ALTER COLUMN "u" TYPE uuid;
--Testcase 189:
SELECT * FROM "type_UUID+" WHERE "i" = 42;
ERROR:  PostgreSQL uuid data type allows only 16 bytes SQLite blob value
HINT:  incorrect value is 17 bytes length
--Testcase 190:
SELECT * FROM "type_UUID+" WHERE "i" = 43;
ERROR:  PostgreSQL uuid data type allows only 16 bytes SQLite blob value
HINT:  incorrect value is 15 bytes length
--Testcase 191:
EXPLAIN VERBOSE
DELETE FROM "type_UUID" WHERE "i" IN (42, 43);
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Delete on public."type_UUID"  (cost=10.00..29.00 rows=29 width=4)
   ->  Foreign Delete on public."type_UUID"  (cost=10.00..29.00 rows=29 width=4)
         SQLite query: DELETE FROM main."type_UUID" WHERE (`i` IN (42, 43))
(3 rows)

--Testcase 192:
DELETE FROM "type_UUID" WHERE "i" IN (42, 43);
--Testcase 193:
INSERT INTO "type_UUID" ("i", "u") VALUES (44, NULL);
--Testcase 194:
SELECT * FROM "type_UUID+";
 i  |                  u                   |  t   | l  
----+--------------------------------------+------+----
 41 | b0eebc99-9c0b-4ef8-bb6d-6bb900000a15 | blob | 16
 44 |                                      | null |   
(2 rows)

--Testcase 195:
SELECT * FROM "type_UUID+" WHERE "u" IS NULL;
 i  | u |  t   | l 
----+---+------+---
 44 |   | null |  
(1 row)

--Testcase 196:
SELECT * FROM "type_UUID+" WHERE "u" IS NOT NULL;
 i  |                  u                   |  t   | l  
----+--------------------------------------+------+----
 41 | b0eebc99-9c0b-4ef8-bb6d-6bb900000a15 | blob | 16
(1 row)

--Testcase 197:
EXPLAIN VERBOSE
SELECT * FROM "type_UUID+" WHERE "u" IS NULL;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public."type_UUID+"  (cost=10.00..5.00 rows=5 width=54)
   Output: i, u, t, l
   SQLite query: SELECT `i`, coalesce(sqlite_fdw_uuid_blob(`u`),`u`), `t`, `l` FROM main."type_UUID+" WHERE ((coalesce(sqlite_fdw_uuid_blob(`u`),`u`) IS NULL))
(3 rows)

--Testcase 198:
EXPLAIN VERBOSE
SELECT * FROM "type_UUID+" WHERE "u" IS NOT NULL;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public."type_UUID+"  (cost=10.00..1045.00 rows=1045 width=54)
   Output: i, u, t, l
   SQLite query: SELECT `i`, coalesce(sqlite_fdw_uuid_blob(`u`),`u`), `t`, `l` FROM main."type_UUID+" WHERE ((coalesce(sqlite_fdw_uuid_blob(`u`),`u`) IS NOT NULL))
(3 rows)

--Testcase 47:
DROP EXTENSION sqlite_fdw CASCADE;
NOTICE:  drop cascades to 44 other objects
DETAIL:  drop cascades to server sqlite_svr
drop cascades to foreign table department
drop cascades to foreign table employee
drop cascades to foreign table empdata
drop cascades to foreign table numbers
drop cascades to foreign table t
drop cascades to foreign table multiprimary
drop cascades to foreign table columntest
drop cascades to foreign table noprimary
drop cascades to foreign table limittest
drop cascades to foreign table grem1_1
drop cascades to foreign table grem1_2
drop cascades to foreign table case_exp
drop cascades to foreign table "type_STRING"
drop cascades to foreign table "type_BYTE"
drop cascades to foreign table "type_SINT"
drop cascades to foreign table "type_BINT"
drop cascades to foreign table "type_INTEGER"
drop cascades to foreign table "type_FLOAT"
drop cascades to foreign table "type_DOUBLE"
drop cascades to foreign table "type_TIMESTAMP"
drop cascades to foreign table "type_BLOB"
drop cascades to foreign table "type_DATE"
drop cascades to foreign table "type_TIME"
drop cascades to foreign table "BitT"
drop cascades to foreign table notype
drop cascades to foreign table typetest
drop cascades to foreign table "type_TEXT"
drop cascades to foreign table alltypetest
drop cascades to foreign table shorty
drop cascades to foreign table "A a"
drop cascades to foreign table fts_table
drop cascades to foreign table fts_table_data
drop cascades to foreign table fts_table_idx
drop cascades to foreign table fts_table_content
drop cascades to foreign table fts_table_docsize
drop cascades to foreign table fts_table_config
drop cascades to foreign table "RO_RW_test"
drop cascades to foreign table "Unicode data"
drop cascades to foreign table type_json
drop cascades to foreign table "type_BOOLEAN"
drop cascades to foreign table "type_UUID"
drop cascades to foreign table "type_UUID+"
drop cascades to server sqlite2
